// components/ScanResultModal.tsx
import React, { useState, useEffect } from 'react';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import axios from 'axios';
import { 
  View, 
  Text, 
  StyleSheet, 
  Modal, 
  TouchableOpacity, 
  ActivityIndicator, 
  Dimensions,
  Image,
  TextInput,
  Alert,
  ScrollView
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

const SCREEN_HEIGHT = Dimensions.get('window').height;

interface Stock {
  id: number;
  name: string;
  quantity: number;
  localisation: {
    city: string;
    latitude: number;
    longitude: number;
  };
}

interface editedBy {
  warehousemanId: number;
  at: string;
}

interface ScanResultModalProps {
  isVisible: boolean;
  onDismiss: () => void;
  productData?: {
    id: number;
    name: string;
    barcode: string;
    stocks: Stock[];
    type: string;
    image: string;
    price: number;
    supplier: string;
    editedBy: editedBy[];
  } | null;
  isLoading?: boolean;
  onUpdateProduct?: (barcode: string, updatedData: any) => void;
}

export default function ScanResultModal({ 
  isVisible, 
  onDismiss, 
  productData, 
  isLoading,
  onUpdateProduct 
}: ScanResultModalProps) {
  // States for managing forms and data
  const [activeTab, setActiveTab] = useState('info');
  const [isAddingProduct, setIsAddingProduct] = useState(!productData);
  const [isAddingStock, setIsAddingStock] = useState(false);
  const [newProduct, setNewProduct] = useState({
    name: '',
    type: '',
    price: '',
    barcode: productData?.barcode || '',
    supplier: '',
    image: ''
  });
  const [newStock, setNewStock] = useState({
    name: '',
    quantity: '',
    city: '',
    latitude: '',
    longitude: ''
  });

  // Update barcode when product data changes
  useEffect(() => {
    if (!productData && isAddingProduct) {
      setNewProduct(prev => ({
        ...prev,
        barcode: productData?.barcode || prev.barcode || ''
      }));
    }
  }, [productData, isAddingProduct]);

  const handleAddProduct = async () => {
    try {
      const userData = await getUserData();
      if (!userData) {
        Alert.alert('Error', 'User data not found');
        return;
      }

      const currentDate = new Date().toISOString().split('T')[0];

      const productToAdd = {
        name: newProduct.name,
        type: newProduct.type,
        barcode: newProduct.barcode,
        price: parseFloat(newProduct.price) || 0,
        supplier: newProduct.supplier,
        image: newProduct.image,
        stocks: [],
        editedBy: [{
          warehousemanId: userData.id,
          at: currentDate
        }]
      };

      const response = await axios.post('http://172.16.9.4:3000/products', productToAdd);

      if (response.status === 201) {
        if (onUpdateProduct) {
          onUpdateProduct(productToAdd.barcode, response.data);
        }
        setIsAddingProduct(false);
        setIsAddingStock(true);
      }
    } catch (error) {
      console.error('Error adding product:', error);
      Alert.alert('Error', 'Failed to add product');
    }
  };

  const getUserData = async () => {
  try {
    const userData = await AsyncStorage.getItem('warehousemanData');
    return userData ? JSON.parse(userData) : null;
  } catch (error) {
    console.error('Error getting user data:', error);
    return null;
  }
};

const validateProductForm = () => {
  if (!newProduct.name) {
    Alert.alert('Error', 'Product name is required');
    return false;
  }
  if (!newProduct.barcode) {
    Alert.alert('Error', 'Barcode is required');
    return false;
  }
  return true;
};

const validateStockForm = () => {
  if (!newStock.name) {
    Alert.alert('Error', 'Stock name is required');
    return false;
  }
  if (!newStock.quantity) {
    Alert.alert('Error', 'Quantity is required');
    return false;
  }
  if (!newStock.city) {
    Alert.alert('Error', 'City is required');
    return false;
  }
  return true;
};

const handleSubmitStock = async () => {
  if (!validateStockForm()) {
    return;
  }

  try {
    const userData = await getUserData();
    if (!userData) {
      Alert.alert('Error', 'User data not found');
      return;
    }

    const currentDate = new Date().toISOString().split('T')[0];
    const stockToAdd = {
      id: Date.now(),
      name: newStock.name,
      quantity: parseInt(newStock.quantity),
      localisation: {
        city: newStock.city,
        latitude: parseFloat(newStock.latitude) || 0,
        longitude: parseFloat(newStock.longitude) || 0
      }
    };

    if (productData && productData.id) {
      const updatedProduct = {
        ...productData,
        stocks: [...(productData.stocks || []), stockToAdd],
        editedBy: [
          ...(productData.editedBy || []),
          { warehousemanId: userData.id, at: currentDate }
        ]
      };

      const response = await axios.put(
        `http://172.16.9.4:3000/products/${productData.id}`,
        updatedProduct
      );

      if (response.status === 200) {
        if (onUpdateProduct) {
          onUpdateProduct(productData.barcode, response.data);
        }
        Alert.alert(
          'Success',
          'Stock added successfully',
          [{ text: 'OK', onPress: onDismiss }]
        );
      }
    }
  } catch (error) {
    console.error('Error adding stock:', error);
    Alert.alert('Error', 'Failed to add stock');
  }
};
  
  return (
    <Modal
      visible={isVisible}
      transparent={true}
      animationType="slide"
      onRequestClose={onDismiss}
    >
      <View style={styles.modalOverlay}>
        <View style={styles.modalContent}>
          <TouchableOpacity style={styles.closeButton} onPress={onDismiss}>
            <MaterialCommunityIcons name="close" size={24} color="#666" />
          </TouchableOpacity>

          {isLoading ? (
            <View style={styles.loadingContainer}>
              <ActivityIndicator size="large" color="#FF9F43" />
              <Text style={styles.loadingText}>Searching for product...</Text>
            </View>
          ) : isAddingProduct ? (
            <ScrollView style={styles.formContainer}>
              <Text style={styles.formTitle}>Add New Product</Text>
              
              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>Barcode</Text>
                <TextInput
                  style={styles.input}
                  value={newProduct.barcode}
                  onChangeText={(text) => setNewProduct(prev => ({ ...prev, barcode: text }))}
                  placeholder="Enter or scan barcode"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>Name</Text>
                <TextInput
                  style={styles.input}
                  value={newProduct.name}
                  onChangeText={(text) => setNewProduct(prev => ({ ...prev, name: text }))}
                  placeholder="Enter product name"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>Type</Text>
                <TextInput
                  style={styles.input}
                  value={newProduct.type}
                  onChangeText={(text) => setNewProduct(prev => ({ ...prev, type: text }))}
                  placeholder="Enter product type"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>Price</Text>
                <TextInput
                  style={styles.input}
                  value={newProduct.price}
                  onChangeText={(text) => setNewProduct(prev => ({ ...prev, price: text }))}
                  keyboardType="decimal-pad"
                  placeholder="Enter price"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>Supplier</Text>
                <TextInput
                  style={styles.input}
                  value={newProduct.supplier}
                  onChangeText={(text) => setNewProduct(prev => ({ ...prev, supplier: text }))}
                  placeholder="Enter supplier"
                />
              </View>

              <TouchableOpacity 
                style={styles.submitButton}
                onPress={handleAddProduct}
              >
                <Text style={styles.submitButtonText}>Add Product</Text>
              </TouchableOpacity>
            </ScrollView>
          ) : isAddingStock ? (
            <ScrollView style={styles.formContainer}>
              <Text style={styles.formTitle}>Add New Stock</Text>
              
              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>Stock Name</Text>
                <TextInput
                  style={styles.input}
                  value={newStock.name}
                  onChangeText={(text) => setNewStock(prev => ({ ...prev, name: text }))}
                  placeholder="Enter stock name"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>Quantity</Text>
                <TextInput
                  style={styles.input}
                  value={newStock.quantity}
                  onChangeText={(text) => setNewStock(prev => ({ ...prev, quantity: text }))}
                  keyboardType="numeric"
                  placeholder="Enter quantity"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>City</Text>
                <TextInput
                  style={styles.input}
                  value={newStock.city}
                  onChangeText={(text) => setNewStock(prev => ({ ...prev, city: text }))}
                  placeholder="Enter city"
                />
              </View>

              <TouchableOpacity 
                style={[
                  styles.submitButton,
                  (!newStock.name || !newStock.quantity || !newStock.city) && styles.submitButtonDisabled
                ]}
                onPress={handleSubmitStock}
                disabled={!newStock.name || !newStock.quantity || !newStock.city}
              >
                <Text style={styles.submitButtonText}>Add Stock</Text>
              </TouchableOpacity>
            </ScrollView>
          ) : (
            // Original product info/edit view remains the same...
            <View>
              {/* Product info/edit view */}
            </View>
          )}
        </View>
      </View>
    </Modal>
  );
}